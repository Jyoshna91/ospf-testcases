package main

import (
	"bytes"
	"fmt"
	"log"
	"golang.org/x/crypto/ssh"
)

// Define your variables
var (
	username  = "admin"
	password  = "tcs123"
	routerIPs = []string{"10.133.35.139", "10.133.35.143"}
	intf      = "ethernet1/7"
)

// Function to connect to the router and return an SSH session
func connectToRouter(routerIP, username, password string) (*ssh.Session, error) {
	config := &ssh.ClientConfig{
		User: username,
		Auth: []ssh.AuthMethod{
			ssh.Password(password),
		},
		HostKeyCallback: ssh.InsecureIgnoreHostKey(),
	}

	client, err := ssh.Dial("tcp", routerIP+":22", config)
	if err != nil {
		return nil, fmt.Errorf("failed to dial: %v", err)
	}

	session, err := client.NewSession()
	if err != nil {
		return nil, fmt.Errorf("failed to create session: %v", err)
	}

	return session, nil
}

// Function to execute commands on the router
func executeCommands(session *ssh.Session, commands []string) (string, error) {
	var stdoutBuf bytes.Buffer
	session.Stdout = &stdoutBuf

	for _, cmd := range commands {
		if err := session.Run(cmd); err != nil {
			return "", fmt.Errorf("failed to execute command '%s': %v", cmd, err)
		}
	}

	return stdoutBuf.String(), nil
}

// Function to configure OSPF Authentication on the router
func configureOSPF(session *ssh.Session, intf string) error {
	commands := []string{
		"configure terminal",
		"int " + intf,
		"ip router ospf 2 area 0",
		"exit",
		"router ospf 2",
		"area 0.0.0.0 authentication message-digest",
		"exit",
		"int " + intf,
		"ip ospf authentication-key 0 cisco",
		"ip ospf message-digest-key 21 md5 0 cisco",
		"end",
	}

	_, err := executeCommands(session, commands)
	return err
}

// Function to unconfigure OSPF Authentication on the router
func unconfigureOSPF(session *ssh.Session, intf string) error {
	commands := []string{
		"configure terminal",
		"int " + intf,
		"no ip router ospf 2 area 0",
		"exit",
		"router ospf 2",
		"no area 0.0.0.0 authentication message-digest",
		"exit",
		"int " + intf,
		"no ip ospf authentication-key 0 cisco",
		"no ip ospf message-digest-key 21 md5 0 cisco",
		"end",
	}

	_, err := executeCommands(session, commands)
	return err
}

func main() {
	// Loop through router IPs for configuration and unconfiguration
	for _, routerIP := range routerIPs {
		session, err := connectToRouter(routerIP, username, password)
		if err != nil {
			log.Fatalf("Error connecting to router %s: %v", routerIP, err)
		}
		defer session.Close()

		// Configure OSPF Authentication
		err = configureOSPF(session, intf)
		if err != nil {
			log.Fatalf("Error configuring OSPF on router %s: %v", routerIP, err)
		} else {
			fmt.Printf("Successfully configured OSPF authentication on router %s.\n", routerIP)
		}

		// Unconfigure OSPF Authentication
		err = unconfigureOSPF(session, intf)
		if err != nil {
			log.Fatalf("Error unconfiguring OSPF on router %s: %v", routerIP, err)
		} else {
			fmt.Printf("Successfully unconfigured OSPF authentication on router %s.\n", routerIP)
		}
	}
}
