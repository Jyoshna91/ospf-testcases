package main

import (
	"bytes"
	"fmt"
	"log"
	"time"

	"golang.org/x/crypto/ssh"
)

var (
	username   = "admin"
	password   = "tcs123"
	interface1 = "ethernet1/7"
	routerIP   = "10.133.35.139"
)

func main() {
	err := configureOSPFAuthentication()
	if err != nil {
		log.Fatalf("Failed to configure OSPF authentication on router: %v", err)
	}

	time.Sleep(2 * time.Second) // Add delay before unconfiguring

	err = unconfigureOSPFAuthentication()
	if err != nil {
		log.Fatalf("Failed to unconfigure OSPF authentication on router: %v", err)
	}

	time.Sleep(2 * time.Second) // Add delay before executing command

	err = executeCommand()
	if err != nil {
		log.Fatalf("Failed to execute command on router: %v", err)
	}
}

func configureOSPFAuthentication() error {
	config := &ssh.ClientConfig{
		User: username,
		Auth: []ssh.AuthMethod{
			ssh.Password(password),
		},
		HostKeyCallback: ssh.InsecureIgnoreHostKey(),
	}

	client, err := ssh.Dial("tcp", routerIP+":22", config)
	if err != nil {
		return fmt.Errorf("failed to connect to router: %w", err)
	}
	defer client.Close()

	session, err := client.NewSession()
	if err != nil {
		return fmt.Errorf("failed to create session: %w", err)
	}
	defer session.Close()

	var stdoutBuf bytes.Buffer
	session.Stdout = &stdoutBuf

	commands := []string{
		"conf t\n",
		fmt.Sprintf("interface %s\n", interface1),
		"ip router ospf 2 area 0\n",
		"exit\n",
		"router ospf 2\n",
		"area 0.0.0.0 authentication message-digest\n",
		"exit\n",
		"interface " + interface1 + "\n",
		"ip ospf authentication-key 0 cisco\n",
		"ip ospf message-digest-key 21 md5 0 cisco\n",
		"end\n",
	}

	for _, cmd := range commands {
		err := session.Run(cmd)
		if err != nil {
			return fmt.Errorf("failed to run command '%s': %w", cmd, err)
		}
		time.Sleep(1 * time.Second) // Add delay between commands
	}

	return nil
}

func unconfigureOSPFAuthentication() error {
	config := &ssh.ClientConfig{
		User: username,
		Auth: []ssh.AuthMethod{
			ssh.Password(password),
		},
		HostKeyCallback: ssh.InsecureIgnoreHostKey(),
	}

	client, err := ssh.Dial("tcp", routerIP+":22", config)
	if err != nil {
		return fmt.Errorf("failed to connect to router: %w", err)
	}
	defer client.Close()

	session, err := client.NewSession()
	if err != nil {
		return fmt.Errorf("failed to create session: %w", err)
	}
	defer session.Close()

	var stdoutBuf bytes.Buffer
	session.Stdout = &stdoutBuf

	commands := []string{
		"conf t\n",
		fmt.Sprintf("interface %s\n", interface1),
		"router ospf 2\n",
		"no area 0.0.0.0 authentication message-digest\n",
		"exit\n",
		"interface " + interface1 + "\n",
		"no ip ospf authentication-key 0 cisco\n",
		"no ip ospf message-digest-key 21 md5 0 cisco\n",
		"end\n",
	}

	for _, cmd := range commands {
		err := session.Run(cmd)
		if err != nil {
			return fmt.Errorf("failed to run command '%s': %w", cmd, err)
		}
		time.Sleep(1 * time.Second) // Add delay between commands
	}

	return nil
}

func executeCommand() error {
	config := &ssh.ClientConfig{
		User: username,
		Auth: []ssh.AuthMethod{
			ssh.Password(password),
		},
		HostKeyCallback: ssh.InsecureIgnoreHostKey(),
	}

	client, err := ssh.Dial("tcp", routerIP+":22", config)
	if err != nil {
		return fmt.Errorf("failed to connect to router: %w", err)
	}
	defer client.Close()

	session, err := client.NewSession()
	if err != nil {
		return fmt.Errorf("failed to create session: %w", err)
	}
	defer session.Close()

	var stdoutBuf bytes.Buffer
	session.Stdout = &stdoutBuf

	// Command to execute
	command := "show ip ospf interface " + interface1

	err = session.Run(command)
	if err != nil {
		return fmt.Errorf("failed to run command '%s': %w", command, err)
	}

	output := stdoutBuf.String()
	fmt.Println(output) // Print the command output

	return nil
}
