package main

import (
	"bytes"
	"fmt"
	"log"
	"testing"
	"time"

	"golang.org/x/crypto/ssh"
)

func OspfAuthentication(deviceIP string, interf string) error {
	serverAddress := deviceIP
	serverUsername := "admin"
	serverPassword := "tcs123"

	config := &ssh.ClientConfig{
		User: serverUsername,
		Auth: []ssh.AuthMethod{
			ssh.Password(serverPassword),
		},
		HostKeyCallback: ssh.InsecureIgnoreHostKey(),
	}

	client, err := ssh.Dial("tcp", serverAddress+":22", config)
	if err != nil {
		return err
	}
	defer client.Close()

	session, err := client.NewSession()
	if err != nil {
		return err
	}
	defer session.Close()

	modes := ssh.TerminalModes{
		ssh.ECHO:          0,
		ssh.TTY_OP_ISPEED: 14400,
		ssh.TTY_OP_OSPEED: 14400,
	}

	if err := session.RequestPty("vt100", 0, 0, modes); err != nil {
		return err
	}

	sshShell, err := session.StdinPipe()
	if err != nil {
		return err
	}
	if err := session.Shell(); err != nil {
		return err
	}
	commands := []string{
		"conf t\n",
		fmt.Sprintf("router ospf 2\n"),
		fmt.Sprintf("area 0.0.0.0 authentication message-digest\n"),
		fmt.Sprintf("exit\n"),
		fmt.Sprintf("interface %s\n", interf),
		fmt.Sprintf("ip ospf authentication-key 0 cisco\n"),
		fmt.Sprintf("ip ospf message-digest-key 21 md5 0 cisco\n"),
		"end\n",
	}

	for _, cmd := range commands {
		sshShell.Write([]byte(cmd))
		time.Sleep(1 * time.Second)
	}

	return nil
}

func TestOspfAuthentication(t *testing.T) {
	err := OspfAuthentication("10.133.35.148", "Ethernet1/11")
	if err != nil {
		t.Errorf("Failed to enable OSPF authentication on device: %v", err)
	}

	time.Sleep(20 * time.Second)
	serverUsername := "admin"
	serverPassword := "tcs123"
	serverAddress := "10.133.35.148"
	OutputCommand := "show ip ospf interface eth1/11"

	router1Config := &ssh.ClientConfig{
		User: serverUsername,
		Auth: []ssh.AuthMethod{
			ssh.Password(serverPassword),
		},
		HostKeyCallback: ssh.InsecureIgnoreHostKey(),
	}
	router1Client, err := ssh.Dial("tcp", serverAddress+":22", router1Config)
	if err != nil {
		log.Fatalf("Failed to connect to Router 1: %v", err)
	}
	defer router1Client.Close()

	router1Session, err := router1Client.NewSession()
	if err != nil {
		log.Fatalf("Failed to create session on Router 1: %v", err)

	}
	defer router1Session.Close()
	router1Output, err := router1Session.CombinedOutput(OutputCommand)
	if err != nil {
		fmt.Printf("Failed to execute ping command on Router 1: %v", err)
	}
	time.Sleep(10 * time.Second)
	fmt.Printf("Router 1 Ping Output:\n%s\n", router1Output)
}
