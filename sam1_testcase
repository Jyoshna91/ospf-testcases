#@aetest.skip('testing fourth testcase')
class Ospf_timers(aetest.Testcase):

    @aetest.setup
    def configuring_ospf_timers(self,testbed):

        logger.info("Configure ospf timers on routers")
        Ospf_common_functions.configure_ospf_timers(uut1,device1['intf1'])
        Ospf_common_functions.configure_ospf_timers(uut3,device3['intf1'])
        time.sleep(15)

    @aetest.test
    def check_ping_ospf_timers(self,testbed):

        logger.info("Check Ospf Timers configured or not ")
        time.sleep(30)
        ospf_config = uut1.execute("show ip ospf interface ethernet 1/11")
        logger.info(ospf_config)
        if "Timer intervals: Hello 30, Dead 100" in ospf_config:
            logger.info("Ospf timers configured on device successful")
        else:
            self.errored('Ospf timers are not configured on device unsuccessful')

        logger.info("Check ospf neighbors after ospf timers configured ")
        time.sleep(15)
        ospf_config1 = uut3.execute("show ip ospf neighbor")
        logger.info(ospf_config1)
        if "FULL" in ospf_config1:
            logger.info("Ospf neighborship successful after ospf timers configured on device")
        else:
            self.errored('Ospf neighborship failed after ospf timers configured on device')

        logger.info("Verifying ospf routes after configuring timers")
        time.sleep(10)
        ospf_config1 = uut2.execute("show ip route")
        logger.info(ospf_config1)
        if "110" in ospf_config1:
            logger.info("Ospf routes successful")
        else:
            self.errored('Ospf routes unsuccessful')


        logger.info("Ping the ip configured on device2: {} to check in bound".format(uut3.name))
        for i in range(3):
            result1 = uut2.execute("ping {}".format(device3['ip_address']))
        res_dict = Ospf_common_functions.validate_ping(result1)
        logger.info("++++++++++++++++++++++++++++")
        logger.info(res_dict)
        logger.info("++++++++++++++++++++++++++++")

        if ((res_dict['sent_pkt'] == res_dict['receive_pkt']) and (res_dict['pkt_loss'] == '0.00%')):
            logger.info("Sent : {} packets and received: {} packets and packet loss: {}".format(res_dict['sent_pkt'],res_dict['receive_pkt'],res_dict['pkt_loss']))
            self.passed("Success: After applied for ospf ping got successful")
        else:
            logger.info("Sent : {} packets and received: {} packets and packet loss: {}".format(res_dict['sent_pkt'],res_dict['receive_pkt']
,res_dict['pkt_loss']))
            self.failed("Failed: After applied for ospf ping got failed")

    @aetest.cleanup
    def unconfigure_ospf_timers_on_device(self,testbed):
        logger.info("Unconfigure ospf timers on Routers")
        Ospf_common_functions.unconfigure_ospf_timers(uut1,device1['intf1'])
        Ospf_common_functions.unconfigure_ospf_timers(uut3,device3['intf1'])

            
