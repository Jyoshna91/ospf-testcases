package debug

import (
    "fmt"
    "golang.org/x/crypto/ssh"
    "log"
    "testing"
    "time"
)

func Ospfexec(deviceIP string,interf string) error {
    serverAddress := deviceIP
    serverUsername := "admin"
    serverPassword := "tcs123"

    config := &ssh.ClientConfig{
        User: serverUsername,
        Auth: []ssh.AuthMethod{
            ssh.Password(serverPassword),
        },
        HostKeyCallback: ssh.InsecureIgnoreHostKey(),
    }

    client, err := ssh.Dial("tcp", serverAddress+":22", config)
    if err != nil {
        panic(err)
    }
    defer client.Close()

    session, err := client.NewSession()
    if err !=nil {
        panic(err)
    }
    defer session.Close()

    modes := ssh.TerminalModes{
            ssh.ECHO: 0,
            ssh.TTY_OP_ISPEED: 14400,
            ssh.TTY_OP_OSPEED: 14400,
    }

    if err := session.RequestPty("vt100", 0, 0, modes); err != nil {
        panic(err)
    }

    sshShell, err := session.StdinPipe()
    if err != nil {
        panic(err)
    }
    if err :=session.Shell(); err !=nil {
        panic(err)
    }
    commands := []string{
            "conf t\n",
            fmt.Sprintf("no feature ospf\n"),
            fmt.Sprintf("feature ospf\n"),
            fmt.Sprintf("router ospf 2\n"),
            fmt.Sprintf("interface %s\n",interf),
            fmt.Sprintf("ip router ospf 2 area 0\n"),
            "end\n",
    }

    for _,cmd := range commands {
        sshShell.Write([]byte(cmd))
        time.Sleep(1 * time.Second)
    }
   // fmt.Printf("RIP enabled on device %s %s\n", serverAddress,interf)

    return nil
}
func CleaningOspf(deviceIP string, interf string) error {
    serverAddress := deviceIP
    serverUsername := "admin"
    serverPassword := "tcs123"

    config := &ssh.ClientConfig{
        User: serverUsername,
        Auth: []ssh.AuthMethod{
            ssh.Password(serverPassword),
        },
        HostKeyCallback: ssh.InsecureIgnoreHostKey(),
    }

    client, err := ssh.Dial("tcp", serverAddress+":22", config)
    if err != nil {
        panic(err)
    }
    defer client.Close()
    session, err := client.NewSession()
    if err !=nil {
        panic(err)
    }
    defer session.Close()

    modes := ssh.TerminalModes{
            ssh.ECHO: 0,
            ssh.TTY_OP_ISPEED: 14400,
            ssh.TTY_OP_OSPEED: 14400,
    }

    if err := session.RequestPty("vt100", 0, 0, modes); err != nil {
        panic(err)
    }

    sshShell, err := session.StdinPipe()
    if err != nil {
        panic(err)
    }
    if err :=session.Shell(); err !=nil {
        panic(err)
    }
    commands := []string{
            "conf t\n",
            fmt.Sprintf("int %s\n",interf),
            fmt.Sprintf("no ip router ospf 2 area 0\n"),
            fmt.Sprintf("no router ospf\n"),
            "end\n",
    }
    for _,cmd := range commands {
        sshShell.Write([]byte(cmd))
        time.Sleep(1 * time.Second)
    }
    return nil
}

