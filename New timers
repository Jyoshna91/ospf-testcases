package main

import (
    "fmt"
    "time"

    "golang.org/x/crypto/ssh"
)

func executeSSHCommand(serverAddress, serverUsername, serverPassword string, commands []string) ([]byte, error) {
    // SSH client configuration
    config := &ssh.ClientConfig{
        User: serverUsername,
        Auth: []ssh.AuthMethod{
            ssh.Password(serverPassword),
        },
        HostKeyCallback: ssh.InsecureIgnoreHostKey(),
    }

    // Connect to the SSH server
    client, err := ssh.Dial("tcp", serverAddress+":22", config)
    if err != nil {
        return nil, err
    }
    defer client.Close()

    // Create a new SSH session
    session, err := client.NewSession()
    if err != nil {
        return nil, err
    }
    defer session.Close()

    // Run commands on the SSH session
    output := []byte{}
    for _, cmd := range commands {
        // Execute command
        out, err := session.CombinedOutput(cmd)
        if err != nil {
            return nil, fmt.Errorf("failed to execute command '%s': %v", cmd, err)
        }
        output = append(output, out...)
    }

    return output, nil
}

func OspfTimers(deviceIP, interf string) error {
    serverUsername := "admin"
    serverPassword := "tcs123"

    commands := []string{
        "conf t",
        "no feature ospf",
        "feature ospf",
        "router ospf 2",
        fmt.Sprintf("interface %s", interf),
        "ip ospf hello-interval 30",
        "ip ospf dead-interval 100",
        "end",
    }

    _, err := executeSSHCommand(deviceIP, serverUsername, serverPassword, commands)
    if err != nil {
        return err
    }

    return nil
}

func TestOspfTimers() {
    deviceIP := "10.133.35.148"
    interf := "Ethernet1/11"

    err := OspfTimers(deviceIP, interf)
    if err != nil {
        fmt.Printf("Failed to enable OSPF on device %s interface %s: %v\n", deviceIP, interf, err)
        return
    }

    fmt.Printf("OSPF timers configured successfully on device %s interface %s\n", deviceIP, interf)
}

func main() {
    TestOspfTimers()
}
