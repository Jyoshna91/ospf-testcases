from genie.testbed import load
from pyats.topology import loader
from pyats import aetest
import re, logging
import pdb
from pyats.async_.exceptions import *
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

class Ospf_common_functions():
    def configure_ip_address(device,intf,ip_address,mask):
        device.configure('''int {intf}\n no switchport\nip address {ip_address} {mask}\n no shut\n end'''.format(intf = intf,ip_address = ip_address, mask = mask))

    def configure_loopback_ip_address(device,intf,ip_address,mask):
        device.configure('''int {intf}\nip address {ip_address} {mask}\n no shut\n end'''.format(intf = intf,ip_address = ip_address, mask = mask))

    def unconfigure_ip_address(device,intf):
        device.configure('''int {intf}\n no ip address\n end'''.format(intf=intf))

    def enabling_ospf(device):
        device.configure('''feature ospf\n end''')
  
    def disabling_ospf(device):
        device.configure('''no feature ospf\n end''')

    def configure_ospf_routers(device):
        device.configure('''router ospf 2\n end''')

    def unconfigure_ospf_routers(device):
        device.configure('''no router ospf 2\n end''')

    def configure_ospf_interface(device,intf):
        device.configure('''int {intf}\n ip router ospf 2 area 0\n end'''.format(intf=intf))

    def unconfigure_ospf_interface(device,intf):
        device.configure('''int {intf}\n no ip router ospf 2 area 0\n end'''.format(intf=intf))

    def configure_ospf_multiarea(device,intf):
        device.configure('''int {intf}\n ip router ospf 2 area 1\n end'''.format(intf=intf))

    def unconfigure_ospf_multiarea(device,intf):
        device.configure('''int {intf}\n no ip router ospf 2 area 1\n end'''.format(intf=intf))

    def configure_ospf_loopback(device,intf):
        device.configure('''int {intf}\n ip router ospf 2 area 2\n end'''.format(intf=intf))

    def unconfigure_ospf_loopback(device,intf):
        device.configure('''int {intf}\n no ip router ospf 2 area 2\n end'''.format(intf=intf))

    def configure_ospf_authentication(device,intf):
        device.configure('''router ospf 2\n area 0.0.0.0 authentication message-digest\n exit\n int {intf}\n ip ospf authentication-key 0 cisco\n ip ospf message-digest-key 21 md5 0 cisco\n end'''.format(intf = intf))

    def unconfigure_ospf_authentication(device,intf):
        device.configure('''router ospf 2\n no area 0.0.0.0 authentication message-digest\n exit\n int {intf}\n no ip ospf authentication-key 0 cisco\n no ip ospf message-digest-key 21 md5 0 cisco\n end'''.format(intf = intf))


    def configure_ospf_timers(device,intf):
        device.configure('''int {intf}\n ip ospf hello-interval 30\n ip ospf dead-interval 100\n end'''.format(intf = intf))

    def unconfigure_ospf_timers(device,intf):
        device.configure('''int {intf}\n no ip ospf hello-interval 30\n no ip ospf dead-interval 100\n end'''.format(intf = intf))

    def configure_ospf_stub_totally(device):
        device.configure('''router ospf 2\n area 1 stub no-summary\n end''')

    def unconfigure_ospf_stub_totally(device):
        device.configure('''router ospf 2\n no area 1 stub no-summary\n end''')


    def configure_ospf_vlinks(device):
        device.configure('''router ospf 2\n area 0.0.0.2 virtual-link 4.4.4.4\n end''')

    def unconfigure_ospf_vlinks(device):
        device.configure('''router ospf 2\n  no area 0.0.0.2 virtual-link 4.4.4.4\n end''')

    def configure_ospf_vlinks1(device):
        device.configure('''router ospf 2\n area 0.0.0.2 virtual-link 10.10.10.2\n end''')

    def unconfigure_ospf_vlinks1(device):
        device.configure('''router ospf 2\n  no area 0.0.0.2 virtual-link 10.10.10.2\n end''')

    def configure_ospf_graceful_shutdown(device):
        device.configure('''router ospf 2\n shutdown\n end''')

    def unconfigure_ospf_graceful_shutdown(device):
        device.configure('''router ospf 2\n no shutdown\n end''')

    def configure_ospf_passive_interface(device,intf):
        device.configure('''int {intf}\n ip ospf passive-interface\n end'''.format(intf = intf))

    def unconfigure_ospf_passive_interface(device,intf):
        device.configure('''int {intf}\n no ip ospf passive-interface\n end'''.format(intf = intf))

    def configure_ospf_DR_BDR(device,intf):
        device.configure('''int {intf}\n ip ospf priority 100\n end'''.format(intf = intf))

    def unconfigure_ospf_DR_BDR(device,intf):
        device.configure('''int {intf}\n no ip ospf priority 100\n end'''.format(intf = intf))

    def configure_ospf_clear_process(device):
        device.configure('''clear ip ospf neighbor *\n end''')


    def configure_ospf_redistribution(device):
        device.configure('''router rip 2\n address-family ipv4 unicast\n redistribute ospf 1 route-map rip\n route-map rip permit\n end''')

    def unconfigure_ospf_redistribution(device):
        device.configure('''router rip 2\n  no address-family ipv4 unicast\n end''')

    def configure_acl_interface(device,intf,acl_name,bound):
        device.configure('''int {intf} \n ip access-group {acl_name} {bound}'''.format(intf=intf,acl_name=acl_name,bound=bound))

    def unconfigure_acl_interface(device,intf,acl_name,bound):
        device.configure('''int {intf} \n no ip access-group {acl_name} {bound}'''.format(intf=intf,acl_name=acl_name,bound=bound))

    def sh_version(input):
        pattern1 = re.compile('  NXOS: version(?P<version>.*)')
        pattern2 = re.compile('  NXOS image file is: (?P<image>.*)')

        output_dict = {}
        for line in input.split("\n"):
            p1 = pattern1.match(line)
            if p1:
                output_dict.update(p1.groupdict())
            p2 = pattern2.match(line)
            if p2:
                output_dict.update(p2.groupdict())
        return output_dict

    def validate_ping(input):
        pattern = re.compile('(?P<sent_pkt>[0-9]+) packets transmitted, (?P<receive_pkt>[0-9]+) packets received, (?P<pkt_loss>[0-9]+\.[0-9]+\%) packet loss')

        out_dict = {}
        for line in input.split('\n'):
            p1 = pattern.match(line)
            if p1:
                out_dict.update(p1.groupdict())
        return out_dict
